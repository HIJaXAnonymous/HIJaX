a = [ 1 , 2 , 3 , 4 , 5 ]
a = [ 1 , 2 , 3 , 4 , 5 ]
datetime . datetime . strptime ( s , '%Y-%m-%d#SPACE#%H:%M:%S' )
{ k : sum ( v ) for k , v in list ( d . items ( ) ) }
zip ( list1 , list2 )
a = [ 'a' , 'b' , 'c' ]
re . search ( '\\b(.+)\\s*(.+?)\\s' , '\\1' , s )
df . groupby ( [ 'a' , 'b' ] ) . median ( ) . median ( )
mylist = [ ( 'a' , '1' ) , ( 'b' , '2' ) , ( 'c' , '2' ) ] #NEWLINE# mylist = [ 'a' , 'b' , 'c' , 'd' , 'e' , 'e' , 'f' , 'f' ]
[ ( x [ 0 ] , x [ 0 ] , x [ 1 ] ) for x in a ]
driver = webdriver . Firefox ( )
re . findall ( '[a-zA-Z][\\w' , str )
powerset ( [ 'a' , 'b' , 'c' , 'd' , 'e' ] )
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
soup = BeautifulSoup ( html )
datetime . datetime . now ( ) . strftime ( '%Y-%m-%d#SPACE#%H:%M:%S' )
int ( re . findall ( '\\d+' , s ) )
my_dict = { 'a' : 1 , 'b' : 2 , 'c' : 2 , 'd' : 3 }
dict ( ( k , v ) for k , v in list ( d . items ( ) ) )
driver . find_element_by_xpath ( "//a[text()='Previous']" ) . clear ( )
[ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ,
name = models . CharField ( max_length = 100 , blank = True )
{ 'a' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] }
dict ( ( k , v ) for k , v in list ( d . items ( ) ) )
print ( '\n' . join ( map ( str , ports ) ) )
re . findall ( '\\d+' , s )
re . findall ( '\\d+' , s )
re . findall ( '\\d+' , s )
print ( get_words ( 'Hello#SPACE#world' ) )
dt = datetime . strptime ( dt , '%Y-%m-%d#SPACE#%H:%M:%S' )
urllib . request . install_opener ( opener )
a = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] )
dict ( zip ( keys , values ) )
dict ( zip ( keys , values ) )
dict ( zip ( keys , values ) )
pattern = re . compile ( '|' . join ( re . findall ( '([a-zA-Z][a-zA-Z]+)' , s ) ) )
sock = socket . socket ( socket . AF_INET , socket . SOCK_STREAM )
tuples = [ [ 'a' , 'b' ] , [ 'a' , 'b' ] , [ 'c' , 'd' ] ]
binascii . hexlify ( struct . pack ( 'BBB' , 16 ) )
sorted ( tuples , key = lambda x : ( - x [ 0 ] , x [ 0 ] ) )
list ( itertools . combinations ( [ 1 , 2 , 3 ] ) )
f . seek ( 0 , os . SEEK_END )
myList = [ int ( x ) for x in myList ]
print ( '{0}' . format ( name , value ) )
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
dt = datetime . strptime ( date_date , '%Y-%m-%d#SPACE#%H:%M:%S' )
"""""" . join ( map ( str , tups ) )
os . system ( 'start#SPACE#%s#SPACE#%s' % filename )
f = open ( filename , 'rb' )
f = open ( 'file' , 'r' )
print ( os . path . dirname ( __file__ ) )
os . system ( 'start#SPACE#%s#SPACE#%s' % filename )
f = open ( 'file' , 'r' )
print ( os . path . dirname ( __file__ ) )
subprocess . call ( [ 'python' , 'http://www.stackoverflow.com' ] )
[ x for x in tokenize . split ( ) if x . strip ( ) ]
a = [ 'a' , 'b' , 'c' ]
re . findall ( '[a-zA-Z][\\w-]*$' , re . UNICODE )
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
l = [ 'a' , 'b' , 'c' , 'd' ]
itertools . permutations ( [ 'a' , 'b' ] , [ 'b' , 'c' ] )
li = [ 'a' , 'b' , 'c' ]
sorted ( unsorted_list , key = lambda x : x [ 1 ] )
logging . getLogger ( ) . setLevel ( logging . DEBUG )
ax2 . yaxis . set_minor_locator ( MaxNLocator ( integer = True ) )
sorted ( list ( d . items ( ) ) , key = lambda x : x [ 1 ] , reverse = True )
sorted ( list ( dct . items ( ) ) , key = lambda x : x [ 1 ] , reverse = True )
sorted ( list ( results . items ( ) ) , key = lambda x : x [ 1 ] , reverse = True )
sorted ( list ( d . items ( ) ) , key = lambda k_v : k_v [ 1 ] [ 0 ] , reverse = True )
np . random . seed ( 0 )
print ( '{0}#SPACE#{1}' . format ( key , value ) )
file . seek ( 0 , os . SEEK_CUR )
a = [ 1 , 2 , 3 , 4 ]
datetime . datetime . strptime ( dateobject , '%Y-%m-%d#SPACE#%H:%M:%S#SPACE#%Z' )
plt . plot ( x , y )
print ( os . path . dirname ( __file__ ) )
a = [ 1 , 2 , 3 , 4 , 5 ]
[ word for word in open ( 'filename.txt' , 'r' ) ]
[ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ]
list1 = [ [ 1 , 2 , 3 ] , [ 4 , 5 ] , [ 7 , 8 , 9 ] ]
results . sort ( key = operator . itemgetter ( 1 ) )
datetime . datetime . now ( pytz . utc )
a = [ [ 1 , 2 ] , [ 3 , 4 ] , [ 5 , 6 ] ]
pattern = re . compile ( '|' . join ( re . escape ( 'This#SPACE#is#SPACE#a#SPACE#sentence#SPACE#sentence' , re . DEBUG ) ) )
re . findall ( '[a-zA-Z][a-z]*' , s )
json . loads ( json_string )
[ [ 'a' , 'b' ] , [ 'c' , 'd' ] ]
s = s . decode ( 'utf8' )
print ( re . findall ( '[a-z]+' , '' , s ) )
my_dict = { 'a' : 1 , 'b' : 2 , 'c' : 2 , 'd' : 3 }
min ( A , key = lambda x : min ( x [ 0 ] ) , reverse = True )
d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 }
myDict = { 'a' : 1 , 'b' : 2 , 'c' : 2 , 'd' : 4 }
d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 }
np . random . seed ( 0 )
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] , 'b' : [ 7 , 8 , 9 ] } )
{ 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 3 }
sys . path . append ( '/path/to/your/your/file' )
re . findall ( '\\d+' , s )
pickle . dump ( f , f )
driver = webdriver . Firefox ( )
pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] , 'b' : [ 1 , 2 , 3 ] } )
[ x for x , y in enumerate ( myList ) if x > 0 ]
{ 'a' : 1 , 'b' : 2 , 'c' : 2 , 'd' : 3 }
sorted ( structure , key = lambda x : ( - x [ 0 ] , x [ 0 ] ) )
s = s . split ( '\n' )
re . sub ( '\\s+' , '#SPACE#' , s )
re . sub ( '\\s+' , '#SPACE#' , s )
print ( s . rstrip ( '\n' ) )
re . sub ( '\\s+' , '\\1' , s )
Sample . objects . filter ( player__contains = [ 'a' , 'b' ] )
root . mainloop ( )
a = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] )
df1 = df2 . sort_index ( inplace = True )
"""""" . join ( re . sub ( '\\s+' , '' , a ) )
d = { 'a' : 1 , 'b' : 2 , 'c' : 2 , 'd' : 3 }
MyModel . objects . filter ( id__contains = [ 'a' , 'b' ] )
re . split ( 'foo' , 'foobarbarbarbarbarbarbarbarbarbarbar' )
sum ( map ( int , s . split ( ) ) )
{ 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 3 }
"""""" . join ( chr ( ord ( c ) ) for c in s . encode ( 'utf-8' ) )
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
data = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 }
data = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 }
data = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 }
a = [ 1 , 2 , 3 , 4 , 5 ]
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
a = [ 1 , 2 , 3 , 4 , 5 ]
print ( os . path . dirname ( __file__ ) )
dict ( ( k , v ) for k , v in list ( my_dict . items ( ) ) )
a = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] )
a = np . array ( [ 1 , 2 , 3 , 4 ] )
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
a = [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ]
text = text . replace ( '#SPACE#' , '#SPACE#' )
a = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] )
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
a = [ 'a' , 'b' , 'c' , 'd' ]
print ( os . environ [ 'LD_LIBRARY_PATH' ] )
print ( os . environ [ 'LD_LIBRARY_PATH' ] )
dict ( ( k , v ) for k , v in list ( d . items ( ) ) )
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
fig = plt . figure ( )
os . chdir ( directory )
my_string = my_string . encode ( 'utf8' )
re . search ( '([a-zA-Z])\\1' , '' , s )
sys . exit ( 0 )
"""{0}#SPACE#{name}#SPACE#{name}#SPACE#{name}#SPACE#{name}#SPACE#{name}""" . format ( ** geo_string )
a = np . array ( [ [ 1 , 2 ] , [ 3 , 4 ] ] )
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
df2 = pd . DataFrame ( { 'A' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
data = json . loads ( json_data )
math . pow ( math . radians ( 1 ) )
a = [ 1 , 2 , 3 , 4 , 5 ]
re . sub ( '\\b' , '' , s )
time . sleep ( 0.1 )
sum ( map ( sum , a ) )
sum ( map ( sum , a ) )
d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 }
d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 }
d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 }
df2 = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
print ( 'Hello#SPACE#will#SPACE#be#SPACE#command#SPACE#was#SPACE#try#SPACE#again.' )
words = [ word for word in words if word . endswith ( word ) ]
max ( iter ( d . items ( ) ) , key = lambda x : x [ 1 ] )
[ 'a' , 'b' , 'c' ]
[ x for x in tokenize_list if x . isdigit ( ) ]
re . compile ( '[a-zA-Z][\\w*' )
re . findall ( '\\d+' , s )
re . compile ( '[a-zA-Z][\\w-]*$' )
df . loc [ : , ( [ 'A' , 'B' ] ) ]
datetime . datetime . now ( pytz . utc ) . date ( )
print ( 'Hello,#SPACE#world!' )
re . sub ( '\\s+' , '' , s )
[ 'a' , 'b' , 'c' ]
re . sub ( '\\s+' , '\\1' , s )
Decimal ( '3.0' )
try : #NEWLINE# #INDENT# pass
a = [ 'a' , 'b' , 'c' ]
try : #NEWLINE# #INDENT# pass #NEWLINE# except KeyError : #NEWLINE# #INDENT# pass #NEWLINE# except KeyError : #NEWLINE# #INDENT# pass
try : #NEWLINE# #INDENT# try : #NEWLINE# #INDENT# pass #NEWLINE# except KeyError : #NEWLINE# #INDENT# pass
try : #NEWLINE# #INDENT# pass #NEWLINE# except KeyError : #NEWLINE# #INDENT# pass
Book . objects . filter ( tags__contains = [ '1' , '2' ] )
with open ( 'test.txt' , 'r' ) as f : #NEWLINE# #INDENT# pass
re . sub ( '\\s+' , '' , s )
df1 = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
a = np . array ( [ 1 , 2 , 3 , 4 , 5 ] )
sorted ( list ( myDict . items ( ) ) , key = lambda x : x [ 1 ] , reverse = True )
sorted ( list ( mydict . items ( ) ) , key = lambda x : int ( x [ 1 ] ) , reverse = True )
sorted ( list ( your_dict . items ( ) ) , key = lambda x : x [ 1 ] , reverse = True )
sorted ( iter ( cityPopulation . items ( ) ) , key = lambda k_v : k_v [ 1 ] , reverse = True )
sys . exit ( app . exec_ ( ) )
file = open ( 'file.txt' , 'r' )
dict ( ( k , v ) for k , v in list ( d . items ( ) ) )
dict ( ( k , v ) for k , v in d . items ( ) )
dict ( ( k , v ) for k , v in list ( d . items ( ) ) )
df [ 'date' ] = pd . to_datetime ( df [ 'date' ] )
my_dict = { k : v for k , v in my_dict . items ( ) }
a [ np . isnan ( a ) ] = np . nan
p = subprocess . Popen ( cmd , stdout = subprocess . PIPE , stderr = subprocess . PIPE )
subprocess . call ( [ 'ls' , '-l' ] , stdin = subprocess . PIPE , #NEWLINE# stderr = subprocess . PIPE )
request . add_header ( 'Accept' , 'application/json' )
re . sub ( '\\s{2,}' , '\\1' , s )
sys . setdefaultencoding ( 'utf-8' )
urllib . parse . quote ( s . encode ( 'utf8' ) )
[ '1' , '2' , '3' , '4' , '5' , '5' ]
a = np . array ( [ 'a' , 'b' , 'c' , 'd' ] )
im = Image . open ( 'image.jpg' )
sorted ( lst , key = lambda x : ( - x [ 0 ] , x [ 0 ] ) )
a = [ 1 , 2 , 3 , 4 , 5 ]
os . system ( 'echo#SPACE#%s' , shell = True )
len ( s ) - len ( s ) - len ( s )
df . loc [ df [ 'A' ] > 0 , 'B' ] = df [ 'A' ] . fillna ( 0 )
df . loc [ df [ 'A' ] > 0.5 , df [ 'A' ] ] . fillna ( 0 )
[ 'a' , 'b' , 'c' ]
root . mainloop ( )
root . mainloop ( )
[ '0x' , '0x' , '0x' , '0x' , '0x' ]
list ( itertools . chain ( * zip ( * l ) ) )
print ( ',#SPACE#' . join ( str ( x ) for x in [ 'hello' , 'world' ] ) )
print ( ',#SPACE#' . join ( map ( str , a ) ) )
print ( '#SPACE#' . join ( [ str ( x ) for x in lst ] ) )
print ( '[%s#SPACE#=#SPACE#%s' % ( key , value ) )
urlpatterns = patterns ( '' , ( '^' , include ( 'mysite.urls' ) ) )
df = pd . DataFrame ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] , columns = [ 'a' , 'b' ] )
print ( model . __class__ . __name__ )
signal . signal ( signal . SIGINT , signal_handler )
models . CharField ( max_length = 100 , blank = True , blank = True )
[ int ( digit ) for digit in re . findall ( '\\d+' , s ) ]
if __name__ == '__main__' : #NEWLINE# #INDENT# main ( )
print ( '#SPACE#' . join ( format ( ord ( a ) ) ) )
{ '_id' : [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] }
pattern = re . compile ( '[a-zA-Z].' )
soup . findAll ( 'div' , { 'class' : 'top' } )
fig , ax = plt . subplots ( )
ax = fig . add_subplot ( 111 , projection = '3d' )
df1 = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
data = json . loads ( json_data )
print ( urllib . parse . quote ( s . encode ( 'utf8' ) ) )
open ( 'filename.exe' , 'rb' ) . read ( )
{ 'a' : 1 , 'b' : 2 , 'c' : 2 , 'd' : 3 }
d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 3 }
d = { 'a' : 1 , 'b' : 2 , 'c' : 2 , 'd' : 3 }
[ { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 4 } , { 'a' : 3 , 'd' : 4 , 'e' : 4 } ]
dict ( ( k , v ) for k , v in list ( d . items ( ) ) )
int ( float ( s ) )
int ( float ( '23.45678' ) )
a = np . array ( [ 1 , 2 , 3 ] )
a = np . array ( [ 1 , 2 , 3 ] )
nx . draw ( G , pos )
a = np . array ( [ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] ] )
np . savetxt ( 'test.csv' , delimiter = ',' )
some_list = [ 'a' , 'b' , 'c' ]
df . to_csv ( 'test.csv' , index = False )
random . shuffle ( lst )
s = s . split ( ':' )
[ item for item in lst if item in lst ]
not any ( isinstance ( x , int ) for x in lst )
re . sub ( '\\W\\S+\\W' , '' , s )
driver . find_element_by_id ( 'tinymce' ) . clear ( )
driver . find_element_by_id ( 'tinymce' ) . clear ( )
datetime . datetime . combine ( dateobject , datetime . datetime ( 2013 , 1 , 1 , 1 ) )
a = [ [ 1 , 2 ] , [ 3 , 4 ] ]
plt . imshow ( im , cmap = cm . gray )
re . sub ( '[^a-zA-Z]+' , '' , s )
re . search ( '\\d+|$' , '\\1' , s )
[ item for item in my_list if item . startswith ( '@' ) ]
set ( [ 1 , 2 , 3 ] ) == set ( [ 1 , 2 , 3 ] )
int ( '0x0101' , 16 )
struct . unpack ( 'd' , b ) [ 0 ]
int ( '0x0101' , 16 )
int ( '0x0101' , 16 )
int ( '0x0101' , 16 )
plt . show ( )
driver . find_element_by_id ( 'tinymce' ) . clear ( )
unicodedata . normalize ( 'NFKD' , yourstring ) . encode ( 'ascii' , 'ignore' )
df2 = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 1 , 2 , 3 ] , 'b' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
struct . unpack ( 'i' , struct . pack ( '>f' , struct . pack ( '>f' , 2.71828182846 ) ) )
subprocess . call ( [ 'java' , '-jar' ] , shell = True )
subprocess . call ( [ 'python' , '-c' ] , shell = True )
print ( s . encode ( 'utf8' ) )
difflib . SequenceMatcher ( None , file )
dict ( ( k , v ) for k , v in my_dict . items ( ) )
isinstance ( x , collections . MutableSequence )
df [ 'Date' ] = pd . to_datetime ( df [ 'Date' ] )
"""{:,}""" . format ( x , y )
xl = win32com . client . Dispatch ( 'Excel.Application' )
df . sort_values ( [ 'a' , 'b' ] , ascending = [ True , True ] )
df . sort_values ( [ 'a' , 'b' ] , ascending = [ True , True ] )
df . sort_values ( [ 'Peak' , 'Weeks' ] , ascending = [ True , True ] )
df . sort ( [ 'Peak' , 'Weeks' ] , ascending = [ True , False ] , inplace = True )
self . request . headers [ 'WWW-Authenticate' ]
[ x for x in a if x not in toRemove ]
re . sub ( '<[^>]*>' , '' , yourstring )
print ( soup . prettify ( ) )
print ( re . sub ( '(\\d+)' , '"\\1"' , parsed ) . encode ( 'utf8' ) )
print ( urllib . request . urlopen ( url ) . read ( ) )
lst = [ [ ] for _ in range ( n ) ]
lst = [ [ ] for _ in range ( n ) ]
lst = [ [ ] for _ in range ( n ) ]
[ [ ] for _ in range ( n ) ]
s . reset_index ( drop = True )
print ( '\n' . join ( map ( str , x ) ) )
[ ( x + y ) for x , y in zip ( x , y ) ]
re . findall ( '[a-z]+' , s )
__init__ . py
"""""" . join ( map ( str , s ) )
urllib . request . install_opener ( opener )
sorted ( list ( myDict . items ( ) ) , key = lambda k_v : k_v [ 1 ] [ 0 ] , reverse = True )
sorted ( list ( D . items ( ) ) , key = lambda k_v : k_v [ 1 ] [ 0 ] , reverse = True )
r = requests . get ( url , headers = headers )
re . sub ( '([a-z])*' , '' , s )
[ [ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ] ]
dict ( ( k , v ) for k , v in list ( dict . items ( ) ) )
my_list = [ item for item in my_list if item ]
re . sub ( '[^a-z]+' , '' , s )
mid = oldstr [ : midlen ] + oldstr [ midlen ]
sum ( map ( sum , zip ( * lists ) ) )
sum ( map ( sum , zip ( * l ) ) )
sum ( map ( sum , a ) )
from functools import reduce #NEWLINE# reduce ( lambda x , y : x * y , l )
f . close ( )
my_list = [ int ( x ) for x in my_list ]
[ 0 , 0 , 0 , 0 , 0 , 0 , 0 ] ,
fig , ax = plt . subplots ( )
plt . show ( )
l = [ 'a' , 'b' , 'c' , 'd' , 'e' ]
[ x for x in s if x . isdigit ( ) ]
sum ( map ( sum , zip ( * ( [ iter ( l ) ] * 2 ) ) ) )
pdb . set_trace ( )
d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 3 }
datetime . datetime . now ( ) . strftime ( '%Y-%m-%d' )
numbers = [ int ( x ) for x in data ]
d = { 'a' : 1 , 'b' : 2 , 'c' : 2 , 'd' : 3 }
a . sort ( key = operator . itemgetter ( 1 ) )
{ 'a' : 1 , 'b' : 2 , 'c' : 2 , 'd' : 3 }
my_list = [ 'a' , 'b' , 'c' ]
my_list = [ 'a' , 'b' , 'c' ]
dict ( ( k , v ) for k , v in d . items ( ) )
len ( set ( [ 1 , 2 , 3 ] ) )
file_path = os . path . abspath ( __file__ )
sorted ( list ( results . items ( ) ) , key = lambda x : x [ 1 ] )
random . choice ( string . ascii_lowercase )
os . system ( 'echo#SPACE#%s' % sys . argv [ 1 ] )
subprocess . call ( [ 'python' , '-c' ] , shell = True )
setattr ( self , name , value )
sys . path . append ( '/path/to/your/file' )
"""""" . join ( c for c in s if c . isspace ( ) )
[ 'a' , 'b' , 'c' ]
re . sub ( '\\s+' , '\\1' , s )
re . sub ( '\\s+' , '\\1' , s )
re . sub ( '\\S+' , '\\1' , s )
"""#SPACE#""" . join ( [ str ( x ) for x in s . split ( ) ] )
"""#SPACE#""" . join ( [ str ( x ) for x in s . split ( ) ] )
sum ( item for item in tuples if item is not None )
assert np . sqrt ( np . sqrt ( np . sqrt ( np . sqrt ( np . sqrt ( np . sqrt ( np . sqrt ( np . sqrt ( np . sqrt ( np . sqrt ( np . sqrt ( A ) ) ) ) ) ) ) ) ) ) [ 0 ] )
{ 'a' : 1 , 'b' : 2 , 'c' : 3 }
from functools import reduce #NEWLINE# reduce ( lambda x , y : x . union ( [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ] ) )
d = { 'key1' : 'value1' , 'key2' : 'value1' , 'key2' : 'value2' }
d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 3 }
d = { 'a' : 1 , 'b' : 2 , 'c' : 3 , 'd' : 3 }
my_dict = { key : value for key , value in list ( my_dict . items ( ) ) }
np . einsum ( 'ij,ij->i' , A , B )
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
a = [ 1 , 2 , 3 , 4 ]
mylist = [ 'a' , 'b' , 'c' , 'd' ]
dict ( ( k , v ) for k , v in list ( d . items ( ) ) )
my_list = [ 'a' , 'b' , 'c' ]
print ( r . text )
print ( '' . join ( [ s for s in s if s . isdigit ( ) ] ) )
codecs . open ( 'myfile.txt' , 'r' )
re . sub ( '[^a-zA-Z]+' , '' , s )
print ( ',' . join ( map ( int , s . split ( ',' ) ) ) )
df2 = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] , 'b' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
df2 = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
not any ( dict . values ( ) )
re . findall ( '[a-zA-Z]' , '' , s )
a = [ 'a' , 'b' , 'c' ]
a = [ 1 , 2 , 3 , 4 , 5 ]
a = [ 'a' , 'b' , 'c' ]
a = [ 1 , 2 , 3 , 4 , 5 ]
[ x [ 0 ] for x in rows ]
re . sub ( '[^a-zA-Z]+' , '' , s )
id = db . Column ( db . String ( ) )
[ 'a' , 'b' , 'c' ]
request . form . get ( 'http://www.google.com' )
Y = np . array ( [ [ 0 , 0 ] , [ 0 , 0 ] ] )
max ( list ( range ( len ( a ) ) , key = lambda x : x [ 1 ] ) , reverse = True )
request . META [ 'QUERY_STRING' ]
df = pd . DataFrame ( { 'a' : [ 1 , 2 , 3 ] , 'b' : [ 4 , 5 , 6 ] } )
id = models . CharField ( max_length = 100 , blank = True )
raise TypeError ( 'unsupported#SPACE#must#SPACE#be#SPACE#be#SPACE#datetime' )
time . mktime ( dt . timetuple ( ) )
now = datetime . now ( )
time . mktime ( dt . timetuple ( ) )
now = datetime . now ( )
lst = [ 'a' , 'b' , 'c' ]
df = pd . DataFrame ( { 'a' : [ 'a' , 'b' ] , 'c' : [ 'a' , 'b' ] } )
plt . show ( )
